学习基本语法是稍微枯燥乏味的->蚕食

一、初识PHP脚本程序
	1.PHP语言标记
		1)PHP开始标记
			<?php
		2)PHP结束标记
			?>
			<?php ?>
		3)我们的页面最终是通过html,css,js来展示出一个炫丽的界面
		4)PHP代码可以嵌入到html代码中任何位置，并且可以嵌入任意多个
		5)文件末尾的?>结束标志可以省略
	2.指令分隔符";"
		1)在一些PHP语句的结尾要加上;表示一句话的结束,当然 也不需要可以的去记，因为你一旦
		  漏掉分号，程序根本执行不了，会报错!
		2)结束标记?>就隐含了一个;
		  所以在?>之前的PHP语句可以省略掉;
	3.注释
		1)多行注释
			/*
				多行注释
			*/
		2)单行注释
			//我是单行注释
	4.遇到空白的处理
		空格，tab制表符，换行 这些写在咱们的PHP代码里面是没有问题的
		可以利用这些空白 来增加我们代码的可读性!
二、变量
	概述：
		举例子：
			现实生活中我们在家里会用柜子来存放我们的衣服，包，书籍等等其他的东西！
			那么我们在编程语言里面是没有 衣服，包，书籍这些概念的！
			我们只有数据！那么我们在程序中这些数据是存放在哪里的呢？  这个就是存放在我们的变量里面的！
			
			变量是用于临时（只有在我们的程序的运行过程中才存在）存储值（数据）的容器
	1.变量的声明
		声明:说白了就是实现告知，通知！
		在我们一些编程语言里面比如C语言 使用变量之前要事先通知，事先声明一下！
		注意：在我们的PHP程序里面 使用变量之前是不需要声明的！
		
		变量用于存储 数字、文本字符串 或者数组这些数据!
		$变量名=数据(值)
		= 在数学里面是‘等于’的意思,在我们的程序语言里面，它不是等于号，它是  '赋值操作符'
	2.变量的销毁
		unset($变量名称)
		$and1=1;
		unset($and1);//销毁$and变量
		echo $and1;//提示出错，因为变量已经被销毁了！
	3.变量的命名规则
		1)变量名称严格区分大写
			$name,$NAME,$Name都是不同的变量
		2)
			字母或者下划线开头
			后面接任意数量的字母数字下划线都可以!
			
			错误的命名方式：
				$1name  错误点：以数字开头了
				$n ame  错误点：中间有空白字符
			总结一下：变量名只能包含 字母 数字 下划线 并且必须以字母或者下划线开头！
			
		3)最好不要用一些关键字作为变量名称(因为在其他的编程语言里面是完全不被允许的)!
	4.可变变量
		//可变变量
		$abc='test';//定义了一个变量$abc里面存了值test
		$$abc='孙胜利';//$test='孙胜利';
		echo $test;
		
		了解一下即可！
	5.变量的引用赋值
		$a=1000;
		/*$b=$a;//相当于把$a的值，复制一份再赋值给$b这个变量*/
		$b=&$a;//相当于给$a起了一个别名，操作其中任何一个，都会影响到另外一个变量的值!
		$b=20;
		echo $a;
		暂时了解一下就可以了!
三、变量类型
	概述：变量类型是指保存在该变量中的数据类型
		变量比喻成柜子  衣服，书籍
		PHP对变量类型看的比较淡，所以我们这节课就比较轻松
		
		1.变量类型简介
		  1）bool (布尔型)
		     $a=true;
			 var_dump($a);
			 往变量里面存true或者false，那么这个变量就是布尔型了
			 
			 
			 以下值被认为是false，其他的值都是被认为是true
			 ①布尔值false
			 ②0
			 ③浮点型0.0
			 ④空白字符串和字符串0//空白字符串指的是直接一对单引号或者双引号里面没有任何内容
			 ⑤没有成员的数组
			 ⑥NULL
			 
		  2）int (整型)
			 往变量里面存整数，那么这个变量就是整型变量啦！
		  3）float (浮点型，也称double)
			 往变量里面存小数，那么这个变量就是浮点型数据了!
			 $a=1.1;
			 var_dump($a);
		  4）string (字符串)
			 字符串就是一系列的字符组成串在一起！
			 1单引号：
				$b=1;
				$a='test$bdwqd\'wqdqw';
				var_dump($a);
				echo $a;
				在定义一些简单的字符串的时候使用单引号这种方法效率比较高！
			 2双引号
				$b=100;
				$a='te$bst......';
				$a="te{$b}st......";
				var_dump($a);
				echo $a;
			 3定界符
				$b=200;
				$a=<<<www
				dwqdqwdwq{$b}dwqdqdqdqdwqdwqcwcfwefwefcscwecwefwdqwdqdefwefwefewfwe
				www;
				var_dump($a);
		  5）array (数组)
				以后再讲！
		  6）object (对象)
				以后再讲！
		  7）resource (资源)
		  8）NULL
			 null表示一个变量没有值，表示空
			 将变量直接赋值为null
			 声明的变量尚未被赋值
			 被unset函数销毁的变量
			 $a=1111;
			 unset($a);
			 var_dump($a);
			 
		2.变量类型相互转换
			 这些呢都是程序运行中不太可控的部分所以在编写代码时最好不要涉及!
			强制转换:
			$a='孙胜利';
			$b=(int)$a;
			var_dump($a);
			var_dump($b);
四、常量
	1.概念
		常量是用于临时（只有在我们的程序的运行过程中才存在）存储值（数据）的容器
	2.定义和使用
		define('常量名称',常量值) 或者 define("常量名称",常量值)
		常量的命名：
			1)和变量一样 只能包含字母数字下划线 并且必须以 字母或者下划线开头
			2)按照惯例常量名字总是大写的
			3)自定义的常量是严格区分大小写的！
		defined()函数来检查是否定义了某个常量
	3.常量和变量的区别
		1)常量前面没有美元符号($)
		2)常量只能用define()函数定义，不能通过赋值语句
		3)********常量可以不用理会变量范围的规则而在任何地方定义和使用
		4)常量一旦被定义就不能被重新定义或者取消定义
		5)常量的值只能是bool,int,float,string类型
	4.预定义常量
		预定义常量说白了就是我们的PHP内核已经帮我们定义好了的常量!
		
		其中有的预定义常量是一__开头的，这些预定义常量我们又叫它魔术常量
		
			代码所在的位置不同他的值也是不同的，所以它加 魔术常量
		八个常用的魔术常量
			http://php.net/manual/zh/language.constants.predefined.php
		预定义常量是不区分大小写的！
五、运算符
	概述：
		说白了就是一些符号，这些符号可以将变量或者数据执行某种运算！
	1.算术运算符
		1)+
			$a=1;
			$b=2;
			$c=$a+$b;
			echo $c;
		2)-
			第一个意思： 减号
				$a=10;
				$b=2;
				$c=$a-$b;
				echo $c;
			第二个意思： 取反
				$a=1;
				$b=-$a;
				echo $b;//-1
				echo '<br />';
				echo $a;//1
				注意：取反并不会影响到被取反变量本身的值!
		3)* 乘号
			$a=4;
			$b=2;
			$c=$a*$b;
			echo $c;
		4)/ 除号
			$a=10;
			$b=2;
			$c=$a/$b;
			echo $c;
		5)% 取模
			$a=12;
			$b=2;
			echo $a%$b;
		6)++ 自增
			前++
				当在一个语句里面需要使用到被自增的变量的值的时候，前++会先执行自增,然后再返回自增之后的值！
				$a=10;
				echo ++$a;//11
			后++
				当在一个语句里面需要使用到被自增的变量的值的时候，后++会先返回变量的值然后再去执行自增
				$a=10;
				//++$a;//$a=$a+1;
				//$a++;//$a=$a+1;
				echo $a++;//echo $a;$a=$a+1;
				echo '<br />';
				echo $a;//11
				
			注意：
			$a=10;
			++$a;//这种情况不需要用到自增变量值的时候，和后++无区别
			echo $a;
		7)-- 自减
			前--
				$a=10;
				//$a--;//$a=$a-1; 和--$a没区别;
				echo --$a;//$a=$a-1;echo $a;
				echo '<br />';
				echo $a;
			
			后--
				$a=10;
				//$a--;//$a=$a-1; 和--$a没区别;
				echo $a--;//echo $a;$a=$a-1;
				echo '<br />';
				echo $a;
		注意：自增或者自减是对变量而言的！
	2.字符串运算符
		. 连接运算符
		$a='孙胜利';
		$b='测试字符串连接符';
		echo $a.$b;
	3.赋值运算符
		=
			把右边的值赋给左边的变量
			$a=1;
			二元运算符
			
			表达式是 PHP 最重要的基石。在 PHP 中，几乎所写的任何东西都是一个表达式。简单但却最精确的定义一个表达式的方式就是“任何有值的东西”。
		+=
			$a=1;
			$b=2;
			$a+=$b;//$a=$a+$b;
			echo $a;
		-=
			$a=2;
			$b=1;
			$a-=$b;//$a=$a-$b
			echo $a;
	4.比较运算符
		概念：
		对操作数（按照比较运算符的要求,规则）进行比较
			如果比较出的结果满足比较运算符的要求那么结果就是true(真，成立，满足),否则就是false（假，不成立,不满足）
		PHP中规定：
			使用echo输出布尔类型值的时候
				echo true;它在页面中会输出1
				echo false;它会在页面中什么都不输出
				规定的，记住就好！所以说我们在测试的过程中如果需要输出布尔类型值的时候我们最好使用var_dump()来输出更明了的结果！
				
		1)== 值是否相等
			如果值相等则就是 true（真，成立）
			如果值不相等那么就是false（假，不成立）
			$a=1;
			$b=1;
			var_dump($a==$b);//true
		2)=== 全等（值要相等，类型也要相等）
			如果两边操作数的值 全等那么就是true否则就是false
			$a=11;
			$b='11';
			//var_dump($a==$b);//true
			var_dump($a===$b);//false
		3)!= 值是否不相等
			如果两边操作数的值不相等那么就是true，否则就是false
			$a=1;
			$b=11;
			var_dump($a!=$b);//true
		4)<> 同上
		5)!== 不全等
			如果两边的操作数不全等那么就是true，否则就是false
			/*
			$a=1111;
			$b=2;
			var_dump($a!=$b);//true
			var_dump($a!==$b);//true
			*/
			$a=11;
			$b='11';
			var_dump($a!=$b);//false
			var_dump($a!==$b);//true,$a不全等于$b
		6)< 小于
			比较两边操作数的值，前面的是否小与后面的
			$a=1;
			$b=1;
			var_dump($a<$b);//false,$a小与$b这句话正确还是错误
		7)> 大于
			$a=10;
			$b=1;
			var_dump($a>$b);
		8)<= 小于等于
			$a=1;
			$b=1;
			var_dump($a<=$b);//$a小与等于$b就是true,否则就是false
		9)>= 大于等于
			$a=2;
			$b=1;
			var_dump($a>=$b);//true
				
	5.逻辑运算符
		概念：
			对表达式进行逻辑运算，运算出的结果是布尔类型的值（true,false）
			要求：
				参与逻辑运算的表达式的值是布尔类型的值，如果不是布尔类型的值会被PHP自动转换成布尔类型的值，然后再参与运算！
		1)逻辑与
			and 或者 &&
				运算规则：
					左右两边的表达式的值都为true的时候，运算的结果就是true
					否则只要其中任意一个为false，运算的结果就是false;
				现实举例：
					true 及格
					false 不及格
					左右两边的表达式就是我们要考试的科目;
					要求：当语文和数学都及格的时候那么，最终的结果才能够通过(true),否则就是不通过(false)
			$a=false;//语文
			$b=true;//数学
			var_dump($a && $b);
			
			中间隐含一个问题：“短路”,运算符的优先级的问题！
		2)逻辑或
			or 或者 ||
				运算规则：
					左右两边的表达式的值有一个为true，运算的结果就是true
					，只有当两边的值都是false的时候，结果才会是false
			$a=false;//语文
			$b=true;//数学
			var_dump($a || $b);
			
			现实举例：
				要求：当语文和数学有一门及格那么最终的结果就是通过true
			中间隐含一个问题：“短路”,运算符的优先级的问题！
		3)逻辑异或
			xor
				运算规则：
					左右两边的表达式的值不一样的时候结果就是true,如果一样那么运算的结果就是false
				
				$a=false;
				$b=false;
				var_dump($a xor $b);
		4)逻辑非
			!
				运算规则：	
					将原来表达式的值否定掉，原来是true，那么结果就是false
						原来是false，那么结果就是true
			
			
			